
$TargetDomain = "init"
$TargetIp = "init"

function Prompt {
    $SearchPath = '.',"$WorkSpace","$env:HOME/.local"
    $PromptString = "$($executionContext.SessionState.Path.CurrentLocation) " 
    $global:TargetIp = ""
    $global:TargetDomain = ""
    if (Get-ChildItem -Path $SearchPath -Filter .target.txt -Hidden)
    {
        $global:TargetIp = (Get-ChildItem -Path $SearchPath -Filter .target.txt -Hidden | select-object @{Name="path";expression={"$($_.DirectoryName)/.target.txt"}}).path | ForEach-Object {Get-Content $_} | Where-Object {$_.length -ne 0}  | Select-Object -First 1
    }
    if (Get-ChildItem -Path $SearchPath -Filter .dn.txt -Hidden)
    {
        $global:TargetDomain = (Get-ChildItem -Path $SearchPath -Filter .target.txt -Hidden | select-object @{Name="path";expression={"$($_.DirectoryName)/.dn.txt"}}).path | ForEach-Object {Get-Content $_} | Where-Object {$_.length -ne 0} | Select-Object -First 1
    }
    if ( $TargetIp ) {
        $PromptString += "$($PSStyle.Foreground.Red)󰓥$($PSStyle.Formatting.ErrorAccent) $($global:TargetIp)$($PSStyle.Reset) "
    }
    if ($TargetDomain) {
        $PromptString += "$($PSStyle.Foreground.Red)󰇗$($PSStyle.Formatting.ErrorAccent) $($global:TargetDomain)$($PSStyle.Reset) "
    }
    "$PromptString> "   
}

function Set-TargetIp {
    param (
        [Parameter(Mandatory, HelpMessage = "Please, provide a valid Ip Address")]
        $TargetIp,
        [switch] 
        $SetLocalTargetIp
    )
    $TargetIpFile = "$env:HOME/.local/.target.txt"
    if ($SetLocalTargetIp)
    {
        $TargetIpFile = './.target.txt'
    }
    Write-Output $TargetIp | Out-File $TargetIpFile 
}

function Set-TargetDomain {
    param (
        [Parameter(Mandatory, HelpMessage = "Please, provide a valid Domain")]
        $TargetDomain,
        [switch] 
        $SetLocalTargetDomain
    )
    $TargetDomainFile = "$env:HOME/.local/.dn.txt"
    if ($SetLocalTargetDomain)
    {
        $TargetDomainFile = './.dn.txt'
    }
    Write-Output $TargetDomain | Out-File $TargetDomainFile 
}

Export-ModuleMember -Function Prompt
Set-Alias std Set-TargetDomain
Export-ModuleMember -Function Set-TargetDomain -Alias std
Set-Alias sti Set-TargetIp
Export-ModuleMember -Function Set-TargetIp -Alias sti
Export-ModuleMember -Variable $TargetIp 
Export-ModuleMember -Variable $TargetDomain 
