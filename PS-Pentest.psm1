
$TargetDomain = "init"
$TargetIp = "init"
$TargetIpFilename=".targetip.txt"
$TargetDomainFilename=".targetdn.txt"
#$Targets

function Prompt {
    $SearchPath = '.',"$WorkSpace","$env:HOME/.local"
    $PromptString = "󰨊 $($executionContext.SessionState.Path.CurrentLocation) " 
    $global:TargetIp = ""
    $global:TargetDomain = ""
    if (Get-ChildItem -Path $SearchPath -Filter $TargetIpFilename -Hidden)
    {
        $global:TargetIp = (Get-ChildItem -Path $SearchPath -Filter $TargetIpFilename -Hidden | select-object @{Name="path";expression={"$($_.DirectoryName)/$TargetIpFilename"}}).path | ForEach-Object {Get-Content $_} | Where-Object {$_.length -ne 0}  | Select-Object -First 1
    }
    if (Get-ChildItem -Path $SearchPath -Filter $TargetDomainFilename -Hidden)
    {
        $global:TargetDomain = (Get-ChildItem -Path $SearchPath -Filter $TargetDomainFilename -Hidden | select-object @{Name="path";expression={"$($_.DirectoryName)/$TargetDomainFilename"}}).path | ForEach-Object {Get-Content $_} | Where-Object {$_.length -ne 0} | Select-Object -First 1
    }
    if ( $global:TargetIp ) {
        $PromptString += "$($PSStyle.Foreground.BrightRed)󰓥$($PSStyle.Formatting.ErrorAccent) $($global:TargetIp)$($PSStyle.Reset) "
    }
    if ($global:TargetDomain) {
        $PromptString += "$($PSStyle.Foreground.BrightRed)󰇗$($PSStyle.Formatting.ErrorAccent) $($global:TargetDomain)$($PSStyle.Reset) "
    }
    "$PromptString> "   
}
Export-ModuleMember -Function Prompt

function Set-TargetIp {
    param (
        [Parameter(Mandatory, HelpMessage = "Please, provide a valid Ip Address")] [IPAddress]$TargetIp,
        [switch] $SetLocalTargetIp
    )
    $TargetIpFile = "$env:HOME/.local/$TargetIpFilename"
    if ($SetLocalTargetIp)
    {
        $TargetIpFile = "./$TargetIpFilename"
    }
    Write-Output $TargetIp.IPAddressToString | Out-File $TargetIpFile 
}
Set-Alias sti Set-TargetIp
Export-ModuleMember -Function Set-TargetIp -Alias sti

function Set-TargetDomain {
    param (
        [Parameter(Mandatory, HelpMessage = "Please, provide a valid Domain")]
        $TargetDomain,
        [switch] 
        $SetLocalTargetDomain
    )
    $TargetDomainFile = "$env:HOME/.local/$TargetDomainFilename"
    if ($SetLocalTargetDomain)
    {
        $TargetDomainFile = "./$TargetDomainFilename"
    }
    Write-Output $TargetDomain | Out-File $TargetDomainFile 
}
Set-Alias std Set-TargetDomain
Export-ModuleMember -Function Set-TargetDomain -Alias std

function Clear-TargetIp {
    $TargetIpFile = "$env:HOME/.local/.targetip.txt"
    Write-Output '' | Out-File $TargetIpFile
}
Set-Alias cti Clear-TargetIp
Export-ModuleMember -Function Clear-TargetIp -Alias cti

function Clear-TargetDomain {
    $TargetDomainFile = "$env:HOME/.local/.targetdn.txt"
    Write-Output '' | Out-File $TargetDomainFile
}
Set-Alias ctd Clear-TargetDomain
Export-ModuleMember -Function Clear-TargetDomain -Alias ctd

# function Set-Target {
#     param (
#         [Parameter(HelpMessage = "Please, provide a valid Ip Address")] $ 
#     )
    
# }

Export-ModuleMember -Variable $TargetIp 
Export-ModuleMember -Variable $TargetDomain 
